# Generated by Django 4.2.1 on 2023-05-22 08:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('gender', models.CharField(max_length=10, null=True, verbose_name='Пол')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actor_surname', models.CharField(max_length=32, verbose_name='Фамилия')),
                ('actor_name', models.CharField(max_length=32, verbose_name='Имя')),
            ],
            options={
                'verbose_name': 'Актёра',
                'verbose_name_plural': 'Актёры',
            },
        ),
        migrations.CreateModel(
            name='Cinema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cinema_name', models.CharField(max_length=70, verbose_name='Название')),
                ('year', models.DateField(verbose_name='Год')),
                ('limit', models.IntegerField(verbose_name='Ограничение')),
                ('story', models.TextField(max_length=500, verbose_name='Сюжет')),
                ('trailer', models.URLField(verbose_name='Трейлер')),
                ('movie', models.URLField(verbose_name='Смотреть')),
                ('raiting', models.DecimalField(decimal_places=1, default=0.0, max_digits=2, verbose_name='Рейтинг')),
            ],
            options={
                'verbose_name': 'Фильм',
                'verbose_name_plural': 'Фильмы',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.CharField(max_length=32, verbose_name='Жанр')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
            },
        ),
        migrations.CreateModel(
            name='Producer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('producer_surname', models.CharField(max_length=32, verbose_name='Фамилия')),
                ('producer_name', models.CharField(max_length=32, verbose_name='Имя')),
            ],
            options={
                'verbose_name': 'Режиссёра',
                'verbose_name_plural': 'Режиссёры',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(null=True, verbose_name='Дата')),
                ('is_favorite', models.BooleanField(default=False, verbose_name='В избранном')),
                ('raiting', models.IntegerField(default=0, verbose_name='Рейтинг')),
                ('history_cinema', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.cinema', verbose_name='Фильм')),
                ('history_login_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Историю',
                'verbose_name_plural': 'История',
            },
        ),
        migrations.AddField(
            model_name='cinema',
            name='cinema_genre',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.genre', verbose_name='Жанр'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='cinema_producer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.producer', verbose_name='Режиссёр'),
        ),
        migrations.CreateModel(
            name='Cast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actor_cast', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.actor', verbose_name='Актёр')),
                ('cinema_cast', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.cinema', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Актёра и Фильм',
                'verbose_name_plural': 'Актёрский состав',
            },
        ),
    ]
